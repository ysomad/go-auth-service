// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	entity "github.com/ysomad/go-auth-service/internal/entity"
)

// UserRepo is an autogenerated mock type for the UserRepo type
type UserRepo struct {
	mock.Mock
}

// Archive provides a mock function with given fields: ctx, id, isArchive
func (_m *UserRepo) Archive(ctx context.Context, id int, isArchive bool) error {
	ret := _m.Called(ctx, id, isArchive)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, bool) error); ok {
		r0 = rf(ctx, id, isArchive)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: ctx, email, password
func (_m *UserRepo) Create(ctx context.Context, email string, password string) (*entity.User, error) {
	ret := _m.Called(ctx, email, password)

	var r0 *entity.User
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *entity.User); ok {
		r0 = rf(ctx, email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *UserRepo) GetByID(ctx context.Context, id int) (*entity.User, error) {
	ret := _m.Called(ctx, id)

	var r0 *entity.User
	if rf, ok := ret.Get(0).(func(context.Context, int) *entity.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PartialUpdate provides a mock function with given fields: ctx, id, cols
func (_m *UserRepo) PartialUpdate(ctx context.Context, id int, cols map[string]interface{}) (*entity.User, error) {
	ret := _m.Called(ctx, id, cols)

	var r0 *entity.User
	if rf, ok := ret.Get(0).(func(context.Context, int, map[string]interface{}) *entity.User); ok {
		r0 = rf(ctx, id, cols)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, map[string]interface{}) error); ok {
		r1 = rf(ctx, id, cols)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
