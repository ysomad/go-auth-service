basePath: /v1
definitions:
  entity.JWT:
    properties:
      accessToken:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        type: string
      refreshToken:
        example: c84f18a2-c6c7-4850-be15-93f9cbaef3b3
        type: string
    type: object
  entity.User:
    properties:
      createdAt:
        example: "2021-08-31T16:55:18.080768Z"
        type: string
      email:
        example: user@mail.com
        type: string
      firstName:
        example: Alex
        type: string
      id:
        example: c84f18a2-c6c7-4850-be15-93f9cbaef3b3
        type: string
      isActive:
        example: true
        type: boolean
      isArchive:
        example: false
        type: boolean
      lastName:
        example: Malykh
        type: string
      updatedAt:
        example: "2021-08-31T16:55:18.080768Z"
        type: string
      username:
        example: username
        type: string
    type: object
  v1.loginRequest:
    properties:
      email:
        example: user@mail.com
        type: string
      fingerprint:
        example: c84f18a2-c6c7-4850-be15-93f9cbaef3b3
        type: string
      password:
        example: secret
        type: string
    required:
    - email
    - fingerprint
    - password
    type: object
  v1.messageResponse:
    properties:
      error:
        example: message
        type: string
    type: object
  v1.refreshJWTRequest:
    properties:
      fingerprint:
        example: c84f18a2-c6c7-4850-be15-93f9cbaef3b3
        type: string
      refreshToken:
        example: c84f18a2-c6c7-4850-be15-93f9cbaef3b3
        type: string
    required:
    - fingerprint
    - refreshToken
    type: object
  v1.userArchiveRequest:
    properties:
      isArchive:
        example: false
        type: boolean
    required:
    - isArchive
    type: object
  v1.userCreateRequest:
    properties:
      confirmPassword:
        example: secret
        type: string
      email:
        example: user@mail.com
        type: string
      password:
        example: secret
        type: string
    required:
    - confirmPassword
    - email
    - password
    type: object
  v1.userPartialUpdateRequest:
    properties:
      firstName:
        example: Alex
        type: string
      lastName:
        example: Malykh
        type: string
      username:
        example: username
        type: string
    type: object
  v1.validationErrorResponse:
    properties:
      error:
        additionalProperties:
          type: string
        example:
          ModelName.FieldName: validation error message
        type: object
    type: object
host: 0.0.0.0:8080
info:
  contact: {}
  description: REST API authentication and user management service
  title: Golang auth service
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Create access and refresh tokens using user email and password
      operationId: authLogin
      parameters:
      - description: To login user email, password and fingerprint as uuid v4 type
          should be provided
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.loginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.JWT'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.messageResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/v1.validationErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.messageResponse'
      summary: Login
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Create new access token
      operationId: authRefresh
      parameters:
      - description: To get new access token, fingerprint and refresh token should
          be provided
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.refreshJWTRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.JWT'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.messageResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/v1.validationErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.messageResponse'
      summary: Refresh access token
      tags:
      - auth
  /users:
    get:
      consumes:
      - application/json
      description: Receive user data
      operationId: userGet
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.messageResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/v1.messageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.messageResponse'
      security:
      - Bearer: []
      summary: Get
      tags:
      - users
    patch:
      consumes:
      - application/json
      description: Update user data partially
      operationId: userPartialUpdate
      parameters:
      - description: Provide at least one user field to update user data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.userPartialUpdateRequest'
      produces:
      - application/json
      responses:
        "204":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.messageResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/v1.messageResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/v1.validationErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.messageResponse'
      security:
      - Bearer: []
      summary: Partial update
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user with email and password
      operationId: userCreate
      parameters:
      - description: To create a new user email and password should be provided
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.userCreateRequest'
      produces:
      - application/json
      responses:
        "204":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.messageResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/v1.validationErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.messageResponse'
      summary: Create
      tags:
      - users
  /users/archive:
    patch:
      consumes:
      - application/json
      description: Archive or restore user
      operationId: userArchive
      parameters:
      - description: To archive or restore a user is_archive should be provided
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.userArchiveRequest'
      produces:
      - application/json
      responses:
        "204":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.messageResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/v1.messageResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/v1.validationErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.messageResponse'
      security:
      - Bearer: []
      summary: Archive/Restore
      tags:
      - users
securityDefinitions:
  Bearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
