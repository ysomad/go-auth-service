basePath: /v1
definitions:
  entity.User:
    properties:
      createdAt:
        example: "2021-08-31T16:55:18.080768Z"
        type: string
      email:
        example: user@mail.com
        type: string
      id:
        example: c84f18a2-c6c7-4850-be15-93f9cbaef3b3
        type: string
      isActive:
        example: true
        type: boolean
      isArchive:
        example: false
        type: boolean
      updatedAt:
        example: "2021-08-31T16:55:18.080768Z"
        type: string
      username:
        example: username
        type: string
    type: object
  v1.loginRequest:
    properties:
      email:
        example: user@mail.com
        maxLength: 255
        type: string
      password:
        example: secret
        maxLength: 128
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  v1.messageResponse:
    properties:
      error:
        example: message
        type: string
    type: object
  v1.userArchiveRequest:
    properties:
      isArchive:
        example: false
        type: boolean
    required:
    - isArchive
    type: object
  v1.userCreateRequest:
    properties:
      confirmPassword:
        example: secret
        type: string
      email:
        example: user@mail.com
        maxLength: 255
        type: string
      password:
        example: secret
        maxLength: 128
        minLength: 6
        type: string
    required:
    - confirmPassword
    - email
    - password
    type: object
  v1.validationErrorResponse:
    properties:
      error:
        additionalProperties:
          type: string
        example:
          ModelName.FieldName: validation error message
        type: object
    type: object
host: 0.0.0.0:8080
info:
  contact: {}
  description: REST API authentication and user management service
  title: Golang auth service
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Logs in and returns authentication cookie
      operationId: authLogin
      parameters:
      - description: To login user email and password should be provided.
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.loginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: ""
          headers:
            Set-Cookie:
              description: '`id`=22KWxEi4XlPGqFrMadBFW1qEFWv; Path=v1; `HttpOnly`;
                `Secure`'
              type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.messageResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/v1.validationErrorResponse'
      summary: Login
      tags:
      - auth
  /users:
    post:
      consumes:
      - application/json
      description: Register a new user with email and password
      operationId: userCreate
      parameters:
      - description: To register a new user email and password should be provided
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.userCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.messageResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/v1.validationErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.messageResponse'
      summary: Register
      tags:
      - users
  /users/{user_id}:
    get:
      consumes:
      - application/json
      description: Receive user data
      operationId: userGet
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.messageResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/v1.messageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.messageResponse'
      summary: Get
      tags:
      - users
  /users/{user_id}/archive:
    patch:
      consumes:
      - application/json
      description: Archive or restore user
      operationId: userArchive
      parameters:
      - description: To archive or restore a user is_archive should be provided
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.userArchiveRequest'
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.messageResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/v1.messageResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/v1.validationErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.messageResponse'
      summary: Archive/Restore
      tags:
      - users
swagger: "2.0"
